function algorithm(algorithmName, Country, Province, reset)
%algorithm Choose algorithm to calculate optimization of the model
%   algorithmName from:
%   - lsqnonlin
%   - patternsearch
%   - fminunc - error at 1s+
%   - fminsearch
%   - fmincon
%   - pso - error because of size output difference 
%   - ga
%
%   Country
%   - ISO Country Name
%   
%   Province
%   - ISO Province Name (otherwise missing)
% 
%   reset
%   - 0 or 1 value if you want to clear last values on start
% 
%   save_images
%   - 0 or 1 value if you want to save images every 1e-4 change (every save_image
%   value change in future)
% 
%   show_plot
%   - 0 or 1 value if you want to see plot update on every 1e-4 f(x) change
%   (every show_plot value change in future)
% 
[optimprob, filename] = optim.openProblem(Country, Province);
optimprob.solver = algorithmName;
warning('off', 'MATLAB:MKDIR:DirectoryExists');
mkdir(join([filename, algorithmName])); 

if (reset > 0)
    optimprob.(algorithmName).allTime = 0;
    optimprob.(algorithmName).squareLast = 1e20;
    optimprob.(algorithmName).squareSmallest = 1e20;
    optimprob.(algorithmName).funcCount = 1;
    optimprob.x0 = optimprob.xOld;
end

optim.saveProblem(optimprob)

global Country_global;
global Province_global;
global allTime;
global squareLast;
global squareSmallest;
global funcCount;
Country_global = Country;
Province_global = Province;
allTime = optimprob.(algorithmName).allTime;
squareLast = optimprob.(algorithmName).squareLast;
squareSmallest = optimprob.(algorithmName).squareSmallest;
funcCount = optimprob.(algorithmName).funcCount;
if (funcCount > 1)
    optimprob.x0 = optimprob.(algorithmName).j;
end


%% lsqnonlin
% jezeli x0 rózne od x to przyjmij allTime poprzedni inaczej wyzeruj

if(strcmpi(algorithmName, 'lsqnonlin'))
    optimprob.(algorithmName).options = optimoptions(@lsqnonlin,...
     'MaxFunctionEvaluations', 50000,...
     'FunctionTolerance', 1e-15,...
     'StepTolerance', 1e-15,...
     'OptimalityTolerance', 1e-15,...
     'Display', 'iter');
%  'FiniteDifferenceType', 'central'
%  'Algorithm', 'levenberg-marquardt',...
%  'MaxFunctionEvaluations', 20000,...
%  'DiffMinChange', 0.01,...
%  'Diagnostics', 'on',...
%  'Display', 'iter-detailed'
    optim.saveProblem(optimprob)
    [optimprob.(algorithmName).j,...
    optimprob.(algorithmName).resnorm,...
    optimprob.(algorithmName).residual,...
    optimprob.(algorithmName).exitflag,...
    optimprob.(algorithmName).output,...
    optimprob.(algorithmName).lambda] = lsqnonlin(@optim.cvopt, optimprob.x0,...
    optimprob.lb, optimprob.ub, optimprob.(algorithmName).options)
    optim.saveProblem(optimprob)
end
%% patternsearch(s)
if(strcmpi(algorithmName, 'patternsearch'))
    optimprob.(algorithmName).options = optimoptions('patternsearch',...
    'UseCompleteSearch', true,...
    'Display', 'iter',...
    'MaxIterations', 2000,...
    'MaxFunctionEvaluations', 2000,...
    'MeshTolerance', 1e-15,...
    'StepTolerance', 1e-15,...
    'Cache', 'on');
%     'MaxMeshSize', 16,...
    % options = optimoptions(options, 'SearchFcn', {  @searchga [] [] });
    optim.saveProblem(optimprob)
    [optimprob.(algorithmName).j,...
        optimprob.(algorithmName).fval,...
        optimprob.(algorithmName).exitflag,...
        optimprob.(algorithmName).output] = patternsearch(@optim.cvopt,...
        optimprob.x0,...
        [],[],[],[],...
        optimprob.lb,...
        optimprob.ub,...
        [],optimprob.(algorithmName).options)
    optimprob.(algorithmName).allTime = allTime;
    optimprob.(algorithmName).squareLast = squareLast;
    optimprob.(algorithmName).squareSmallest = squareSmallest;
    optimprob.(algorithmName).funcCount = funcCount;
    optim.saveProblem(optimprob)
end

%% fminunc(s)
if(strcmpi(algorithmName, 'fminunc'))
    optimprob.(algorithmName).options = optimoptions('fminunc',...
        'Display', 'iter',...
        'StepTolerance', 1e-15,...
        'MaxIterations', 2000,...
        'MaxFunctionEvaluations', 2000);
%         'DiffMaxChange', 1e-8,...

    optim.saveProblem(optimprob)
    [optimprob.(algorithmName).j,...
        optimprob.(algorithmName).fval,...
        optimprob.(algorithmName).exitflag,...
        optimprob.(algorithmName).output,...
        optimprob.(algorithmName).grad,...
        optimprob.(algorithmName).hessian] = fminunc(@optim.cvopt,optimprob.x0,optimprob.(algorithmName).options)
    optimprob.(algorithmName).allTime = allTime;
    optimprob.(algorithmName).squareLast = squareLast;
    optimprob.(algorithmName).squareSmallest = squareSmallest;
    optimprob.(algorithmName).funcCount = funcCount;
    optim.saveProblem(optimprob)
end
%% fminsearch(s)
if(strcmpi(algorithmName, 'fminsearch'))
%     Error using optim.cvopt (line 26)
%     Solver encountered an error while simulating model 'covid' at time
%     1.0000009999999999 and cannot continue. Please check the model for errors.
    optimprob.(algorithmName).options = optimset('Display', 'iter',...
        'TolFun', 1e-15,...
        'MaxIter', 2000,...
        'MaxFunEvals', 2000);
%     'fminsearch',...
    optim.saveProblem(optimprob)
    [optimprob.(algorithmName).j,...
        optimprob.(algorithmName).fval,...
        optimprob.(algorithmName).exitflag,...
        optimprob.(algorithmName).output] = fminsearch(@optim.cvopt,...
        optimprob.x0,optimprob.(algorithmName).options)
    optimprob.(algorithmName).allTime = allTime;
    optimprob.(algorithmName).squareLast = squareLast;
    optimprob.(algorithmName).squareSmallest = squareSmallest;
    optimprob.(algorithmName).funcCount = funcCount;
    optim.saveProblem(optimprob)
end
%% fmincon(s)
if(strcmpi(algorithmName, 'fmincon'))
%     Error using optim.cvopt (line 26)
%     Solver encountered an error while simulating model 'covid' at time
%     1.0000009999999999 and cannot continue. Please check the model for errors.
    optimprob.(algorithmName).options = optimoptions('fmincon',...
        'Display', 'iter',...
        'DiffMaxChange', 5,...
        'TolFun', 1e-15,...
        'MaxIter', 2000,...
        'MaxFunEvals', 20000);
    optim.saveProblem(optimprob)
    [optimprob.(algorithmName).j,...
        optimprob.(algorithmName).fval,...
        optimprob.(algorithmName).exitflag,...
        optimprob.(algorithmName).output,...
        optimprob.(algorithmName).grad,...
        optimprob.(algorithmName).hessian] = fmincon(@optim.cvopt,...
        optimprob.x0,...
        [],[],[],[],...
        optimprob.lb,...
        optimprob.ub,...
        [],optimprob.(algorithmName).options)
    optimprob.(algorithmName).allTime = allTime;
    optimprob.(algorithmName).squareLast = squareLast;
    optimprob.(algorithmName).squareSmallest = squareSmallest;
    optimprob.(algorithmName).funcCount = funcCount;
    optim.saveProblem(optimprob)
end
%% pso(s)

if(strcmpi(algorithmName, 'pso_algorithm'))
%     Error using optim.cvopt (line 26)
%     Solver encountered an error while simulating model 'covid' at time
%     1.0000009999999999 and cannot continue. Please check the model for errors.
    optimprob.(algorithmName).options = psoptimset(...
        'Display', 'iter',...
        'TolFun', 1e-15,...
        'MaxIter', 2000,...
        'MaxFunEvals', 20000);
    optim.saveProblem(optimprob)
    [optimprob.(algorithmName).j,...
        optimprob.(algorithmName).fval,...
        optimprob.(algorithmName).exitflag,...
        optimprob.(algorithmName).output,...
        optimprob.(algorithmName).population,...
        optimprob.(algorithmName).scores] = pso(@optim.cvopt,...
        1,...
        [],[],[],[],...
        optimprob.lb,...
        optimprob.ub,...
        [],...
        optimprob.(algorithmName).options)
    optimprob.(algorithmName).allTime = allTime;
    optimprob.(algorithmName).squareLast = squareLast;
    optimprob.(algorithmName).squareSmallest = squareSmallest;
    optimprob.(algorithmName).funcCount = funcCount;
    optim.saveProblem(optimprob)
end

%% ga(s)