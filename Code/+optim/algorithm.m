function data = algorithm(algorithmName, Country, Province, reset)
%algorithm Choose algorithm to calculate optimization of the model
%   algorithmName from:
%   - lsqnonlin
%   - patternsearch
%   - ga
%   - fminsearch
%   - fmincon
%   - fminunc - loops at 1s
%   - pso
%
%   Country
%   - ISO Country Name
%   
%   Province
%   - ISO Province Name (otherwise missing)
% 
%   reset
%   - 0 or 1 value if you want to clear last values on start
% 
%   save_images
%   - 0 or 1 value if you want to save images every 1e-4 change (every save_image
%   value change in future)
% 
%   show_plot
%   - 0 or 1 value if you want to see plot update on every 1e-4 f(x) change
%   (every show_plot value change in future)
% 
maxfunc = 1000;
global Country_global;
global Province_global;
global allTime;
global squareLast;
global squareSmallest;
global funcCount;

[optimprob, filename] = optim.openProblem(Country, Province);
optimprob.solver = algorithmName;
optim.saveProblem(optimprob);

warning('off', 'MATLAB:MKDIR:DirectoryExists');
mkdir(join([filename, algorithmName])); 

data = optim.openData(optimprob);

if (reset > 0)
    data.allTime = 0;
    data.squareLast = 1e20;
    data.squareSmallest = 1e20;
    data.funcCount = 1;
end

% optim.saveData(optimprob, data); 
Country_global = Country;
Province_global = Province;
allTime = data.allTime;
squareLast = data.squareLast;
squareSmallest = data.squareSmallest;
funcCount = data.funcCount;

if isfield(data,'j')
    x0 = data.j;
elseif (funcCount > 1)
    x0 = data.x;
else
    x0 = optimprob.x0;
end

%% lsqnonlin
if(strcmpi(algorithmName, 'lsqnonlin'))
    data.options = optimoptions(@lsqnonlin,...
     'MaxFunctionEvaluations', maxfunc,...
     'FunctionTolerance', 1e-15,...
     'StepTolerance', 1e-15,...
     'OptimalityTolerance', 1e-15,...
     'Display', 'iter');
%  'FiniteDifferenceType', 'central'
%  'Algorithm', 'levenberg-marquardt',...
%  'MaxFunctionEvaluations', 20000,...
%  'DiffMinChange', 0.01,...
%  'Diagnostics', 'on',...
%  'Display', 'iter-detailed'

    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.resnorm,...
        data.residual,...
        data.exitflag,...
        data.output,...
        data.lambda] = lsqnonlin(@optim.cvopt, x0,...
    optimprob.lb, optimprob.ub, data.options);
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data);
    optim.saveProblem(optimprob);
end

%% patternsearch(s)
if(strcmpi(algorithmName, 'patternsearch'))
    data.options = optimoptions('patternsearch',...
    'UseCompleteSearch', true,...
    'Display', 'iter',...
    'MaxIterations', 2000,...
    'MaxFunctionEvaluations', maxfunc,...
    'MeshTolerance', 1e-15,...
    'StepTolerance', 1e-15,...
    'Cache', 'on');
%     'MaxMeshSize', 16,...
    
    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.fval,...
        data.exitflag,...
        data.output] = patternsearch(@optim.cvopt,...
        x0,...
        [],[],[],[],...
        optimprob.lb,...
        optimprob.ub,...
        [],data.options);
    
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data);
    optim.saveProblem(optimprob);
end

%% ga(s)
if(strcmpi(algorithmName, 'ga'))
    data.options = optimoptions('ga',...
    'Display', 'iter',...
    'MaxGenerations', maxfunc/10,...
    'FunctionTolerance', 1e-15);
%   'PopulationSize', 200

    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.fval,...
        data.exitflag,...
        data.output,...
        data.population,...
        data.score] = ga(@optim.cvopt, 8,...
        [], [], [], [],...
        optimprob.lb,...
        optimprob.ub,...
        [],...
        data.options);
    
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data);
    optim.saveProblem(optimprob);
end

%% fminsearch(s)
if(strcmpi(algorithmName, 'fminsearch'))
    data.options = optimset('Display', 'iter',...
        'TolFun', 1e-15,...
        'MaxIter', 2000,...
        'MaxFunEvals', maxfunc);
%     'fminsearch',...

    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.fval,...
        data.exitflag,...
        data.output] = fminsearch(@optim.cvopt,...
        x0,...
        data.options);
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data);
    optim.saveProblem(optimprob);
end

%% fmincon(s)
if(strcmpi(algorithmName, 'fmincon'))
    data.options = optimoptions('fmincon',...
        'Display', 'iter',...
        'DiffMaxChange', 5,...
        'TolFun', 1e-15,...
        'MaxIter', 2000,...
        'MaxFunEvals', maxfunc);
    
    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.fval,...
        data.exitflag,...
        data.output,...
        data.grad,...
        data.hessian] = fmincon(@optim.cvopt,...
        x0,...
        [],[],[],[],...
        optimprob.lb,...
        optimprob.ub,...
        [],data.options);
    
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data);
    optim.saveProblem(optimprob);
end

%% fminunc(s)
if(strcmpi(algorithmName, 'fminunc'))
    data.options = optimoptions('fminunc',...
        'Display', 'iter',...
        'StepTolerance', 1e-15,...
        'OptimalityTolerance', 1e-15,...
        'MaxIterations', 2000,...
        'MaxFunctionEvaluations', maxfunc);
%         'DiffMaxChange', 1e-8,...

    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.fval,...
        data.exitflag,...
        data.output,...
        data.grad,...
        data.hessian] = fminunc(@optim.cvopt, x0, data.options);
    
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data);
    optim.saveProblem(optimprob)
end
%% pso(s)
if(strcmpi(algorithmName, 'pso'))
    data.options = psooptimset(...
        'Display', 'iter',...
        'TolFun', 1e-15,...
        'MaxIter', 2000,...
        'MaxFunEvals', maxfunc);
    
    optim.saveProblem(optimprob);
    optim.saveData(optimprob, data);
    
    [data.j,...
        data.fval,...
        data.exitflag,...
        data.output,...
        data.population,...
        data.scores] = pso(@optim.cvopt,...
        8,...
        [],[],[],[],...
        optimprob.lb,...
        optimprob.ub,...
        [],...
        data.options);
    
    data.allTime = allTime;
    data.squareLast = squareLast;
    data.squareSmallest = squareSmallest;
    data.funcCount = funcCount;
    optim.saveData(optimprob, data)
    optim.saveProblem(optimprob)
end